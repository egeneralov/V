#!/bin/bash

## install FTP support
function install_ftp {
	title "Installing FTP support";
	debconf-set-selections <<< "proftpd-basic shared/proftpd/inetd_or_standalone select standalone";
	apt-get install -y proftpd > /dev/null 2>&1 || error "Installing FTP support failed";
	echo "DefaultRoot ~" >> /etc/proftpd/proftpd.conf; # All users locked in their home
	echo -e "<IfModule mod_tls.c>\nTLSEngine\ton\nTLSLog\t/var/log/proftpd/tls.log\nTLSProtocol\tSSLv23\nTLSOptions\tNoCertRequest\nTLSRSACertificateFile\t/etc/postfix/server.crt\nTLSRSACertificateKeyFile\t/etc/postfix/server.key\nTLSVerifyClient\toff\nTLSRequired\ton\n</IfModule>\n" > /etc/proftpd/tls.conf; # TLS one-line config
	sed -i 's/#Include \/etc\/proftpd\/tls.conf/Include \/etc\/proftpd\/tls.conf/g' /etc/proftpd/proftpd.conf; # enable tls support
	echo -e "127.0.0.1\t`uname -n`" >> /etc/hosts; /etc/init.d/proftpd restart > /dev/null 2>&1 || error "Failed to restart ftp service"; # must resolv himself
	title "FTP tls support ready";
}

### Install MTA
function install_mta {
	domain=$1; mysqlrootpasswd=$2; mailpasswd=$2; echo $domain > /etc/mailname; title "Installing MTA (postfix & dovecot).";
	git clone https://github.com/egeneralov/mta.git > /dev/null 2>&1;
	cd mta;
	openssl req -nodes -newkey rsa:2048 -keyout postfix/server.key -out postfix/server.crt -subj "/C=RU/ST=Name Surname/L=Location/O=Company/OU=Department/CN=$domain" > /dev/null 2>&1;
	debconf-set-selections <<< "postfix postfix/mailname string $domain";
	debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'";
	apt-get purge -y exim\* > /dev/null 2>&1;
	apt-get install -y dovecot-core dovecot-imapd dovecot-mysql dovecot-pop3d dovecot-sieve postfix postfix-mysql > /dev/null 2>&1 || error "Installing MTA from apt failed";
	/etc/init.d/postfix stop > /dev/null 2>&1; /etc/init.d/dovecot stop > /dev/null 2>&1;
	groupadd -g 5000 vmail > /dev/null 2>&1; useradd -g vmail -u 5000 vmail -d /home/vmail > /dev/null 2>&1;
	mkdir -p /home/vmail/$domain/$user; chown -R vmail:vmail /home/vmail/;
	echo "CREATE DATABASE mail;" | mysql -uroot -p$mysqlrootpasswd mysql > /dev/null 2>&1 || error_only "create database failed";
	echo "CREATE USER 'mail'@'localhost' IDENTIFIED BY '$mailpasswd';" | mysql -uroot -p$mysqlrootpasswd mail > /dev/null 2>&1 || error_only "create mail db user failed";
	echo "GRANT ALL PRIVILEGES ON mail.* TO 'mail'@'localhost';" | mysql -uroot -p$mysqlrootpasswd mail > /dev/null 2>&1 ||error_only "mysql set user permissions failed";
	echo "FLUSH PRIVILEGES;" | mysql -uroot -p$mysqlrootpasswd mail > /dev/null 2>&1 || error_only "flush privileges failed";
	mysql -uroot -p$mysqlrootpasswd mail < mail.sql > /dev/null 2>&1 || error_only "import sql file to mail db failed";
	sed -i "s/mynewpassword/$mailpasswd/g" postfix/virtual_* dovecot/dovecot-sql.conf;
	rm -rf /etc/dovecot || error_only "remove /etc/dovecot failed"; rm -rf /etc/postfix || error_only "remove /etc/postfix failed";
	cp -r postfix /etc/ || error_only "replace dovecot config failed"; cp -r dovecot /etc/ || error_only "replace postfix config failed";
	sed -i "s/$mailpasswd/mynewpassword/g" postfix/virtual_* dovecot/dovecot-sql.conf;
	/etc/init.d/postfix start > /dev/null 2>&1 || error_only "postfix start failed"; /etc/init.d/dovecot start > /dev/null 2>&1 || error_only "dovecot start failed";
	cd ..; rm -rf mta;
}
### repository for php-7
function add_repo_dotdeb { title "Adding dotdeb.org repo";  apt-get install -y curl > /dev/null >&1 || error "Curl installation failed."; backup_file /etc/apt/sources.list; echo "deb http://packages.dotdeb.org jessie all" >> /etc/apt/sources.list; curl https://www.dotdeb.org/dotdeb.gpg -s | apt-key add - > /dev/null 2>&1 || error "Apt error. Check network"; apt-get update > /dev/null 2>&1 || error "Apt error. Check network"; }
### APT
function apt-auto { title "Apt clean & update & upgrade"; apt-get clean > /dev/null 2>&1; apt-get update > /dev/null 2>&1 || error "Apt error. Check network"; apt-get upgrade -y > /dev/null 2>&1 || error "System upgrade error. Check manualy."; }
### Install nginx (5.7 mb)
function install_nginx { title "Installig nginx"; apt-get install -y nginx > /dev/null 2>&1 || error "Nginx installation error"; mkdir -p /etc/nginx/ssl || error "Can not create /etc/nginx/ssl"; }
### Installing acme.sh
function install_acme { title "Installig acme.sh"; apt-get install -y curl cron netcat openssl > /dev/null 2>&1 || error "Dependences installation error."; curl -s https://get.acme.sh | sh > /dev/null 2>&1; }
### Install MySQL (96.4 mb)
function install_mysql { title "Installig MySQL"; debconf-set-selections <<< "mysql-server-5.5 mysql-server/root_password string $1"; debconf-set-selections <<< "mysql-server-5.5 mysql-server/root_password_again string $1"; apt-get install -y mysql-server mysql-client > /dev/null 2>&1 || error "MySQL installation error"; }
### Install php 7 (101 mb)
function install_php_7 { add_repo_dotdeb; title "Installig PHP 7"; apt-get install -y php7.0 php7.0-cli php7.0-fpm php7.0-curl php7.0-gd php7.0-imagick php7.0-mcrypt php7.0-imap php7.0-mbstring php7.0-xml php7.0-xmlrpc php7.0-xsl php7.0-json php7.0-memcached php7.0-apcu php7.0-apcu-bc php7.0-opcache php7.0-mysql php7.0-sqlite3 php7.0-pgsql php7.0-redis php7.0-interbase php7.0-odbc php7.0-zip php7.0-bz2 php7.0-dba php7.0-enchant php7.0-gmp php7.0-igbinary php7.0-intl php7.0-ldap php7.0-msgpack php7.0-geoip php7.0-readline php7.0-recode php7.0-tidy php7.0-sqlite3 > /dev/null 2>&1 || error "PHP 7 installation error"; }
### Install php 5 (123 mb)
function install_php_5 { title "Installig PHP 5"; apt-get install -y php5 php5-cli php5-apcu php5-geoip php5-gnupg php5-imagick php5-json php5-memcache php5-memcached php5-oauth php5-pecl-http php5-redis php5-cgi php5-curl php5-fpm php5-enchant php5-gd php5-imap php5-gmp php5-intl php5-ldap php5-mcrypt php5-mysql php5-odbc php5-pgsql php5-readline php5-tidy php5-xmlrpc php5-sqlite php5-xsl > /dev/null 2>&1 || error "PHP 5 installation error"; }
### Complete install
function install { read -p "`question 'Enter passwd for MySQL root user: '`" mysqlpasswd; read -p "`question 'Enter domain for mail: '`" maildomain; apt-auto; install_nginx; install_acme; install_php_5; install_php_7; install_mysql $mysqlpasswd; install_mta $maildomain $mysqlpasswd; install_ftp; }
# MTA functions
function add_mail_domain { echo "REPLACE INTO \`domains\` SET \`domain\` = '$1';" | mysql -uroot -p$2 mail; }
function add_mail_user { read -p "`question 'Enter password: '`" mysqlrootpasswd || error "MySQL mail password"; read -p "`question 'Enter domain: '`" domain; read -p "`question 'Enter user: '`" user; email="$user@$domain"; read -p "`question 'Enter password: '`" password; echo "INSERT INTO \`domains\` (\`domain\`) VALUES ('$domain');" | mysql -uroot -p$2 mail; echo "INSERT INTO \`users\` (\`email\`, \`password\`, \`quota\`, \`domain\`) VALUES ('$user@$domain', encrypt('$password'), '20971520', '$domain');" | mysql -uroot -p$mysqlrootpasswd mail > /dev/null 2>&1; }
# enchant output
function error { echo -e "\e[31m	[E]: $1\e[0m"; exit; }
function question { echo -e "\e[93m [Q]: \e[32m$1\e[0m"; }
function error_only { echo -e "\e[31m	[E]: $1\e[0m"; }
function title { echo -e "\e[32m	[I]: $1\e[0m"; }
# need
function my_help { title "	V [ls|add_site|del_site|add_mail_user|del_mail_user]"; }
function backup_file { cp $1 $1.orig.`date +%Y-%m-%d-%H-%S` || error "Error backup $1 as $1.orig.`date +%Y-%m-%d-%H-%S`"; }
## nginx commands
function ng_reload { service nginx reload; }
function ng_enable { if [ ! -f "/etc/nginx/sites-available/$1" ]; then error "Site not found"; fi; mv /etc/nginx/sites-available/$1 /etc/nginx/sites-enabled/; }
function ng_disable { if [ ! -f "/etc/nginx/sites-enabled/$1" ]; then error "Site not found"; fi; mv /etc/nginx/sites-enabled/$1 /etc/nginx/sites-available; }
## nginx ls sites
function ng_ls_enabled { title "Sites enabled"; for site in `ls /etc/nginx/sites-enabled/`; do echo -e "\t\t$site"; done; }
function ng_ls_disabled { error_only "Sites disabled"; for site in `ls /etc/nginx/sites-available/`; do echo -e "\t\t$site"; done }
## nginx enchant config
function enchant_config { sed -i 's/{/{\n\t/g' /etc/nginx/sites-available/$1; sed -i 's/}/}\n\t/g' /etc/nginx/sites-available/$1; sed -i 's/;/;\n\t/g' /etc/nginx/sites-available/$1; }
## http config
function ng_http_html { cat <<< " server { listen 80; root /sites/$1/public; index index.php index.html index.htm; server_name $1;} " > /etc/nginx/sites-available/$1;}
function ng_http_php_5 { cat <<< " server { listen 80; root /sites/$1/public; index index.php index.html index.htm; server_name $1; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_http_php_7 { cat <<< " server { listen 80; root /sites/$1/public; index index.php index.html index.htm; server_name $1; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_http_proxy { cat <<< " server { listen 80; root /sites/$1/public; index index.html; server_name $1; location / { proxy_pass $2; proxy_set_header Host \$server_name; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; } } " > /etc/nginx/sites-available/$1; }
## https config
function ng_https_html { cat <<< " server { listen 443 ssl; ssl_certificate /sites/$1/ssl/$1.crt; ssl_certificate_key /sites/$1/ssl/$1.key; root /sites/$1/public; index index.php index.html index.htm; server_name $1; } " > /etc/nginx/sites-available/$1; }
function ng_https_php_5 { cat <<< " server { server_name $1; listen 443 ssl; ssl_certificate /sites/$1/ssl/$1.crt; ssl_certificate_key /sites/$1/ssl/$1.key; root /sites/$1/public; index index.php index.html index.htm; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \\.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_https_php_7 { cat <<< " server { server_name $1; listen 443 ssl; ssl_certificate /sites/$1/ssl/$1.crt; ssl_certificate_key /sites/$1/ssl/$1.key; root /sites/$1/public; index index.php index.html index.htm; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \\.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_https_proxy { cat <<< " server { listen 443 ssl; ssl_certificate /sites/$1/ssl/$1.crt; ssl_certificate_key /sites/$1/ssl/$1.key; index index.html; server_name $1; location / { proxy_pass $2; proxy_set_header Host \$server_name; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; } } " > /etc/nginx/sites-available/$1; }
## rewrite
function ng_rewrite_www { cat <<< " server { server_name www.$1; listen 80; return 301 http://$1\$request_uri; } " >> /etc/nginx/sites-available/$1; }
function ng_rewrite_https { cat <<< " server { server_name $1; listen 80; rewrite ^ https://\$http_host\$request_uri? permanent; } " >> /etc/nginx/sites-available/$1; }
## acme - let`s encrypt cert`s
function ng_config_acme { cat <<< " server {listen 80; root /sites/$1/public; index index.html; server_name $1 www.$1; location /.well-known/acme-challenge {allow all;autoindex on;} } " > /etc/nginx/sites-available/$1; } 
function acme_verify { echo ''; mkdir -p /sites/$1/public/.well-known/acme-challenge/; ng_config_acme $1; ng_enable $1; service nginx restart > /dev/null 2>&1; /root/.acme.sh/acme.sh --issue -d $1 -w /sites/$1/public --home "/root/.acme.sh" > /dev/null 2>&1 || error_only "Failed to get cert"; }
function acme_install { /root/.acme.sh/acme.sh --install-cert --home "/root/.acme.sh" -d $1 --cert-file /sites/$1/ssl/$1.crt --key-file /sites/$1/ssl/$1.key --fullchain-file /sites/$1/ssl/$1.ca --reloadcmd "service nginx reload" > /dev/null 2>&1 || error "Failed to install cert" ; }
function ssl_acme { echo ''; title "Try to get certificate from let's encrypt"; ng_config_acme $1; ng_reload; acme_verify $1 || error "Failed to get certificate."; acme_install $1 || error "Failed to install certificate"; title "Installed ssl certificate from let's encrypt"; }
function ssl_generate { title "Please, answer for simple questions."; openssl req -newkey rsa:2048 -nodes -keyout /sites/$1/ssl/$1.key -x509 -days 365 -out /sites/$1/ssl/$1.crt || error "Failed to generate ssl cert"; title "SSL certificate generated"; }
function ssl_import { title "Importing SSL files. "; pwd=`pwd`; read -p "`question 'Enter location for .crt [$pwd/]: '`" ssl_crt; read -p "`question 'Enter location for .key [./]: '`" ssl_key; cat `pwd`/$ssl_crt > /sites/$1/ssl/$1.crt || error "Failed to write crt"; cat `pwd`/$ssl_key > /sites/$1/ssl/$1.key || error "Failed to write key"; title "Import succeseful"; }
## mysql database and user add (step adding site)
function add_mysql_database {
	domain=$1; domain=`echo $domain | sed 's/-/_/g'| sed 's/\./_/g'`; passwd=`openssl rand -base64 12`;
	echo "CREATE DATABASE $domain;" | mysql -uroot -p$2 mysql > /dev/null 2>&1 || error_only "create database failed";
	echo "CREATE USER '$domain'@'%' IDENTIFIED BY '$passwd';" | mysql -uroot -p$2 $domain > /dev/null 2>&1 || error_only "create user failed";
	echo "grant all privileges on $domain.* to $domain@'%' identified by '$passwd';" | mysql -uroot -p$2 mysql > /dev/null 2>&1 || error_only "grant user access to database failed";
	title "MySQL database & user: $domain";	title "MySQL passwd for user $domain: $passwd"; echo "MySQL: $domain $passwd" >> /root/.Vdomainpasswd;
}

function add_site_http {
	# Ask site type
	echo -e "\t1. [HTML]\n\t2. PHP 5\n\t3. PHP 7\n\t4. Proxy"; read -p "`question 'Site type for $1? '`" -n 1 site_type;
	case "$site_type" in
	1) ng_http_html $1; ng_rewrite_www $1;
	;;
	2) ng_http_php_5 $1; ng_rewrite_www $1;
	;;
	3) ng_http_php_7 $1; ng_rewrite_www $1;
	;;
	4) ng_http_proxy $1; ng_rewrite_www $1;
	;;
	*) ng_http_html $1; ng_rewrite_www $1; error_only "Wrong number."; title "Site $1 was created as html site.";
	;;
	esac;
	curl -sS https://raw.githubusercontent.com/egeneralov/V/master/index.html > /sites/$1/public/index.html;
	sed -i "s/New Site/$1/g" /sites/$1/public/index.html;
	chown -R $1:www-data /sites/$1;
	enchant_config $1;
	ng_enable $1; ng_reload;
	title "Nginx config ready and applied";
}

function add_site_https {
	# Ask ssl type
	echo -e "\n\t1. [Generate self-signed]\n\t2. Let's encrypt\n\t3. Import .crt & .key"; read -p "`question 'SSL type for $1? '`" -n 1 ssl_type;
	case "$ssl_type" in
	1) ssl_generate $1;
	;;
	2) ssl_acme $1;
	;;
	3) ssl_import $1;
	;;
	*) rm -rf /sites/$1; deluser $1 > /dev/null 2>&1; error "Must have action number for ssl adding";
	;;
	esac
	# Ask site type
	echo -e "\n\t1. [HTML]\n\t2. PHP 5\n\t3. PHP 7\n\t4. Proxy"; read -p "`question 'Site type? '`" -n 1 site_type; echo '';
	case "$site_type" in
	1) ng_https_html $1; ng_rewrite_www $1; ng_rewrite_https $1;
	;;
	2) ng_https_php_5 $1; ng_rewrite_www $1; ng_rewrite_https $1;
	;;
	3) ng_https_php_7 $1; ng_rewrite_www $1; ng_rewrite_https $1;
	;;
	4) ng_https_proxy $1; ng_rewrite_www $1; ng_rewrite_https $1;
	;;
	*) ng_https_html $1; ng_rewrite_www $1; ng_rewrite_https $1; error_only "Wrong number."; title "Site $1 was created as html site.";
	;;
	esac
	curl -sS https://raw.githubusercontent.com/egeneralov/V/master/index.html > /sites/$1/public/index.php;
	sed -i "s/New Site/$1/g" /sites/$1/public/index.php;
	chown -R $1:www-data /sites/$1;
	enchant_config $1;
	ng_enable $1; ng_reload;
	title "Nginx config ready and applied";
}

function add_site {
	if [ -z "$1" ]; then error "Specify domain name."; fi;
	read -p "`question 'Add site? [y/N]: '`" -n 1 add_site;
	if [[ "$add_site" == "n" || "$add_site" == "N" || "$add_site" == "" ]]; then error "Aborted"; fi;
	rm /etc/nginx/sites-enabled/$1 /etc/nginx/sites-enabled/$1 > /dev/null 2>&1;
	echo -e "\n\n\n\n\n\n" | adduser --quiet --disabled-password --shell /bin/bash --home /sites/$1 --ingroup www-data $1 --force-badname > /dev/null 2>&1;
	echo '';
	read -p "`question 'Password : '`" passwd;
	echo "$1:$passwd" | chpasswd > /dev/null 2>&1;
	echo "Domain: $1 $passwd" >> /root/.Vdomainpasswd;
	mkdir -p /sites/$1/{public,ssl,backup};
	chown -R $1:www-data /sites/$1;
	read -p "`question 'Need SSL $1? [y/N]: '`" -n 1 need_ssl;
	case "$need_ssl" in
	n) add_site_http $1;
	;;
	N) add_site_http $1;
	;;
	y) add_site_https $1;
	;;
	Y) add_site_https $1;
	;;
	*) add_site_http $1;
	;;
	esac;
	title "Nginx ready";
	title "Adding mail support";
	read -p "`question 'MySQL root password: '`" mysqlrootpasswd;
	add_mail_domain $1 $mysqlrootpasswd || error_only "Failed to apply mail support for $1";
	title "Creating MySQL database and user";
	add_mysql_database "$1" "$mysqlrootpasswd";
}

function del_site {
	if [ -z "$1" ]; then error "Specify domain name."; fi;
	read -p "`question 'Del site $1? [y/N]: '`" -n 1 del_site;
	if [[ "$del_site" == "n" || "$del_site" == "N" || "$del_site" == "" ]]; then error "Aborted"; fi; echo '';
	rm /etc/nginx/sites-enabled/$1 > /dev/null 2>&1; rm /etc/nginx/sites-available/$1 > /dev/null 2>&1;
	read -p "`question 'Del files $1? [y/N]: '`" -n 1 del_files;
	if [[ "$del_files" == "n" || "$del_files" == "N" || "$del_files" == "" ]]; then error "Aborted"; fi; echo '';
	deluser $1 > /dev/null 2>&1; rm -rf /sites/$1;
	read -p "`question 'Del database for $1? [y/N]: '`" -n 1 del_db; echo '';
	read -p "`question 'MySQL root password: '`" mysqlpasswd;
	if [[ "$del_db" == "n" || "$del_db" == "N" || "$del_db" == "" ]]; then error "Aborted"; fi; echo '';
	domain=`echo $1 | sed 's/-/_/g'| sed 's/\./_/g'`;
	echo "DROP DATABASE $domain; DROP USER $domain;" | mysql -uroot -p$mysqlpasswd mysql;
}

case "$1" in
install) install;
;;
add_site) add_site $2;
;;
del_site) del_site $2;
;;
add_mail) add_mail_user;
;;
del_mail) del_mail_user;
;;
ls) ng_ls_enabled; ng_ls_disabled;
;;
*) my_help;
;;
esac;
