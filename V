#!/bin/bash

. ./VE_install

# enchant output
function error { echo -e "\e[31m	[E]: $1\e[0m"; exit; }
function question { echo -e "\e[93m [Q]: \e[32m$1\e[0m"; }
function error_only { echo -e "\e[31m	[E]: $1\e[0m"; }
function title { echo -e "\e[32m	[I]: $1\e[0m"; }
function my_help { echo HELP; }

## nginx commands
function ng_reload { service nginx reload; }
function ng_enable { if [ ! -f "/etc/nginx/sites-enabled/$1" ]; then error "Site not found"; fi; mv /etc/nginx/sites-available/$1 /etc/nginx/sites-enabled/$1; }
function ng_disable { if [ ! -f "/etc/nginx/sites-enabled/$1" ]; then error "Site not found"; fi; mv /etc/nginx/sites-enabled/$1 /etc/nginx/sites-available/$1; }
function ng_ls_enabled { ls /etc/nginx/sites-enabled/$1; }
function ng_ls_disabled { ls /etc/nginx/sites-enabled/$1; }
## http config
function ng_http_html { cat <<< " server { listen 80; root /sites/$1/public; index index.php index.html index.htm; server_name $1;} " > /etc/nginx/sites-available/$1;}
function ng_http_php_5 { cat <<< " server { listen 80; root /sites/$1/public; index index.php index.html index.htm; server_name $1; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_http_php_7 { cat <<< " server { listen 80; root /sites/$1/public; index index.php index.html index.htm; server_name $1; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php/php7.1-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_http_proxy { cat <<< " server { listen 80; root /sites/$1/public; index index.html; server_name $1; location / { proxy_pass $2; proxy_set_header Host \$server_name; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; } } " > /etc/nginx/sites-available/$1; }
## https config
function ng_https_html { cat <<< " server { listen 443 ssl; ssl_certificate /etc/nginx/ssl/$1.crt; ssl_certificate_key /etc/nginx/ssl/$1.key; root /sites/$1/public; index index.php index.html index.htm; server_name $1; } " > /etc/nginx/sites-available/$1; }
function ng_https_php_5 { cat <<< " server { server_name $1; listen 443 ssl; ssl_certificate /etc/nginx/ssl/$1.crt; ssl_certificate_key /etc/nginx/ssl/$1.key; root /sites/$1/public; index index.php index.html index.htm; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \\.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_https_php_7 { cat <<< " server { server_name $1; listen 443 ssl; ssl_certificate /etc/nginx/ssl/$1.crt; ssl_certificate_key /etc/nginx/ssl/$1.key; root /sites/$1/public; index index.php index.html index.htm; client_max_body_size 100m; location / { index  index.php index.html; rewrite  ^(.*)\$ /index.php?\$args last; } location ~ \\.php\$ { try_files \$uri = 404; fastcgi_pass unix:/var/run/php/php7.1-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; include fastcgi_params; } } " > /etc/nginx/sites-available/$1; }
function ng_https_proxy { cat <<< " server { listen 443 ssl; ssl_certificate /etc/nginx/ssl/$1.crt; ssl_certificate_key /etc/nginx/ssl/$1.key; index index.html; server_name $1; location / { proxy_pass $2; proxy_set_header Host \$server_name; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; } } " > /etc/nginx/sites-available/$1; }
## rewrite
function ng_rewrite_www { cat <<< " server { server_name www.$1; listen 80; return 301 http://$1\$request_uri; } " >> /etc/nginx/sites-available/$1; }
function ng_rewrite_https { cat <<< " server { server_name $1; listen 80; return 301 https://$1\$request_uri? permanent; } " >> /etc/nginx/sites-available/$1; }
## acme - let`s encrypt cert`s
function ng_config_acme { cat <<< " server {listen 80; root /sites/$1/public; index index.html; server_name $1 www.$1; location /.well-known/acme-challenge {allow all;autoindex on;} } " > /etc/nginx/sites-available/$1; } 
function acme_verify { echo ''; mkdir -p /sites/$1/public/.well-known/acme-challenge/; ng_config_acme $1; service nginx restart > /dev/null 2>&1; /root/.acme.sh/acme.sh --force --issue -d $1 -w /sites/$1/public --home "/root/.acme.sh" > /dev/null 2>&1 || error "Failed to get cert"; }
function acme_install { /root/.acme.sh/acme.sh --install-cert --home "/root/.acme.sh" -d $1 --cert-file /etc/nginx/ssl/$1.crt --key-file /etc/nginx/ssl/$1.key --fullchain-file /etc/nginx/ssl/$1.ca --reloadcmd "service nginx reload" > /dev/null 2>&1 || error "Failed to install cert" ; }
function ssl_acme { echo ''; title "Try to get certificate from let's encrypt"; ng_config_acme $1; ng_reload; acme_verify $1 || error "Failed to get certificate."; acme_install $1 || error "Failed to install certificate"; title "Installed ssl certificate from let's encrypt"; }
function ssl_generate { title "Please, answer for simple questions."; openssl req -newkey rsa:2048 -nodes -keyout /etc/nginx/ssl/$1.key -x509 -days 365 -out /etc/nginx/ssl/$1.crt || error "Failed to generate ssl cert"; title "SSL certificate generated"; }
function ssl_import { title "Importing SSL files. "; pwd=`pwd`; read -p "`question 'Enter location for .crt [$pwd/]: '`" ssl_crt; read -p "`question 'Enter location for .key [./]: '`" ssl_key; cat `pwd`/$ssl_crt > /etc/nginx/ssl/$1.crt || error "Failed to write crt"; cat `pwd`/$ssl_key > /etc/nginx/ssl/$1.key || error "Failed to write key"; title "Import succeseful"; }

function add_site_http {
	echo -e "\t1. [HTML]\n\t2. PHP 5\n\t3. PHP 7\n\t4. Proxy";
	read -p "`question 'Site type for $1? '`" -n 1 site_type;
	case "$site_type" in
	1) ng_http_html $1; ng_enable $1; ng_reload;
	;;
	2) ng_http_php_5 $1; ng_enable $1; ng_reload;
	;;
	3) ng_http_php_7 $1; ng_enable $1; ng_reload;
	;;
	4) ng_http_proxy $1; ng_enable $1; ng_reload;
	;;
	*) ng_http_html $1; ng_enable $1; ng_reload; error_only "Wrong number."; title "Site $1 was created as html site.";
	;;
	esac;
}

function add_site_https {
	echo -e "\n\t1. [Generate self-signed]\n\t2. Let's encrypt\n\t3. Import .crt & .key";
	read -p "`question 'SSL type for $1? '`" -n 1 ssl_type;
	case "$ssl_type" in
	1) ssl_generate $1;
	;;
	2) ssl_acme $1;
	;;
	3) ssl_import $1;
	;;
	*) rm -rf /sites/$1; deluser $1 > /dev/null 2>&1; error "Must have action number for ssl adding";
	;;
	esac
	echo -e "\n\t1. [HTML]\n\t2. PHP 5\n\t3. PHP 7\n\t4. Proxy";
	read -p "`question 'Site type for $1? '`" -n 1 site_type;
	case "$site_type" in
	1) ng_https_html $1; ng_enable $1; ng_reload;
	;;
	2) ng_https_php_5 $1; ng_enable $1; ng_reload;
	;;
	3) ng_https_php_7 $1; ng_enable $1; ng_reload;
	;;
	4) ng_https_proxy $1; ng_enable $1; ng_reload;
	;;
	*) ng_https_html $1; ng_enable $1; ng_reload; error_only "Wrong number."; title "Site $1 was created as html site.";
	;;
	esac
	title "Nginx config ready and applied";
}

function add_site {
	if [ -z "$1" ]; then error "Specify domain name."; fi;
	read -p "`question 'Add site? [y/N]: '`" -n 1 add_site;
	if [[ "$add_site" == "n" || "$add_site" == "N" || "$add_site" == "" ]]; then error "Aborted"; fi;
	rm /etc/nginx/sites-enabled/$1 /etc/nginx/sites-enabled/$1 > /dev/null 2>&1;
	echo -e "\n\n\n\n\n\n" | adduser --quiet --disabled-password --shell /bin/bash --home /sites/$1 --ingroup www-data $1 --force-badname > /dev/null 2>&1;
	echo '';
	read -p "`question 'Password : '`" passwd;
	echo "$1:$passwd" | chpasswd > /dev/null 2>&1;
	mkdir -p /sites/$1/{public,ssl,backup};
	chown -R $1:www-data /sites/$1;
	read -p "`question 'Need SSL $1? [y/N]: '`" -n 1 need_ssl;
	case "$need_ssl" in
	n) add_site_http $1;
	;;
	N) add_site_http $1;
	;;
	y) add_site_https $1;
	;;
	Y) add_site_https $1;
	;;
	*) add_site_http $1;
	;;
	esac;
	title "Site ready";
}

function del_site {
	if [ -z "$1" ]; then error "Specify domain name."; fi;
	read -p "`question 'Del site $1? [y/N]: '`" -n 1 del_site;
	if [[ "$del_site" != "y" || "$del_site" != "Y" ]]; then error "Aborted"; fi;
	read -p "`question 'Del files $1? [y/N]: '`" -n 1 del_files;
	if [[ "$del_files" == "y" || "$del_files" == "Y" ]]; then deluser $1 > /dev/null 2>&1; rm -rf /sites/$1; fi;
	read -p "`question 'Del database for $1? [y/N]: '`" -n 1 del_database;
	read -p "`question 'MySQL root password: '`" -n 1 mysqlpasswd;
	if [[ "$del_database" == "y" || "$del_database" == "Y" ]]; then mysql -p$mysqlpasswd "DROP DATABASE $1; DROP USER IF EXISTS $1;"; fi;

}

case "$1" in
install) install;
;;
add) add_site $2;
;;
del) del_site $2;
;;
*) my_help;
;;
esac;











